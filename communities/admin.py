from django.contrib import admin
from django.contrib.auth.models import User
from django.http import HttpResponseRedirect
from django.urls import path
from django.utils.html import format_html
from .models import Community

@admin.register(Community)
class CommunityAdmin(admin.ModelAdmin):
    list_display = [
        'name', 
        'created_by', 
        'created_at', 
        'member_count', 
        'post_count',
        'moderator_count',
        'community_actions'
    ]
    
    list_filter = [
        'created_at',
        ('created_by', admin.RelatedOnlyFieldListFilter),
    ]
    
    search_fields = [
        'name', 
        'description',
        'created_by__username',
        'created_by__email'
    ]
    
    filter_horizontal = ['members', 'moderators']
    
    readonly_fields = [
        'created_at',
        'created_by',
        'community_stats',
        'recent_activity'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'created_by')
        }),
        ('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã', {
            'fields': ('members', 'moderators')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('community_stats', 'recent_activity', 'created_at'),
            'classes': ('collapse',)
        }),
    )
    
    # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ created_by —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    def save_model(self, request, obj, form, change):
        if not obj.pk:  # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ
            obj.created_by = request.user
        super().save_model(request, obj, form, change)
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('created_by')\
                                           .prefetch_related('members', 'moderators', 'posts')
    
    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
    actions = ['remove_inactive_communities', 'export_community_data']
    
    def remove_inactive_communities(self, request, queryset):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –±–µ–∑ –ø–æ—Å—Ç–æ–≤ –∏ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        inactive_communities = queryset.filter(posts__isnull=True, members__count__lt=2)
        count = inactive_communities.count()
        inactive_communities.delete()
        self.message_user(request, f'–£–¥–∞–ª–µ–Ω–æ {count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤')
    remove_inactive_communities.short_description = "–£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
    
    def export_community_data(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
        self.message_user(request, f'–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {queryset.count()} —Å–æ–æ–±—â–µ—Å—Ç–≤')
    export_community_data.short_description = "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤"
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def member_count(self, obj):
        return obj.member_count()
    member_count.short_description = 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
    member_count.admin_order_field = 'members__count'
    
    def post_count(self, obj):
        return obj.posts.count()
    post_count.short_description = 'üìù –ü–æ—Å—Ç–æ–≤'
    post_count.admin_order_field = 'posts__count'
    
    def moderator_count(self, obj):
        return obj.moderators.count()
    moderator_count.short_description = 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤'
    
    def community_stats(self, obj):
        return format_html(
            "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{}</b><br>–ü–æ—Å—Ç–æ–≤: <b>{}</b><br>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: <b>{}</b>",
            obj.member_count(),
            obj.posts.count(),
            obj.moderators.count()
        )
    community_stats.short_description = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
    
    def recent_activity(self, obj):
        recent_posts = obj.posts.order_by('-created_at')[:5]
        if recent_posts:
            posts_list = "".join([
                f"<li>{post.title} ({post.created_at.date()})</li>" 
                for post in recent_posts
            ])
            return format_html(f"<ul>{posts_list}</ul>")
        return "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤"
    recent_activity.short_description = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã"
    
    def community_actions(self, obj):
        return format_html(
            '<a href="/communities/r/{}/" target="_blank">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</a> | '
            '<a href="/admin/communities/community/{}/change/">‚úèÔ∏è –†–µ–¥–∞–∫—Ç.</a>',
            obj.name, obj.id
        )
    community_actions.short_description = "–î–µ–π—Å—Ç–≤–∏—è"
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    def has_delete_permission(self, request, obj=None):
        if obj and obj.member_count() > 100:  # –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∫—Ä—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            return False
        return super().has_delete_permission(request, obj)
    
    # –õ–∏–º–∏—Ç –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    def get_actions(self, request):
        actions = super().get_actions(request)
        if 'delete_selected' in actions:
            actions['delete_selected'] = (
                self.delete_selected_action,
                'delete_selected',
                "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
            )
        return actions
    
    def delete_selected_action(self, modeladmin, request, queryset):
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
        deletable = queryset.filter(members__count__lte=100)
        count = deletable.count()
        deletable.delete()
        self.message_user(request, f'–£–¥–∞–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ—Å—Ç–≤ (–∫—Ä—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã)')